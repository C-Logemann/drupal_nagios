<?php

use \Drupal\Core\Extension\ModuleHandlerInterface;

// Copyright 2009 Khalid Baheyeldin http://2bits.com
// 2015 Erik Wegner

// Defines to be used by this modules and others that use its hook_nagios()
define('NAGIOS_STATUS_OK',       \Drupal::config('nagios.settings')->get('nagios.status.ok'));
define('NAGIOS_STATUS_UNKNOWN',  \Drupal::config('nagios.settings')->get('nagios.status.unknown'));
define('NAGIOS_STATUS_WARNING',  \Drupal::config('nagios.settings')->get('nagios.status.warning'));
define('NAGIOS_STATUS_CRITICAL', \Drupal::config('nagios.settings')->get('nagios.status.critical'));

/**
 * Mapping of defines to text strings that Nagios understands
 */
function nagios_status() {
  return array(
    NAGIOS_STATUS_OK       => 'OK',
    NAGIOS_STATUS_UNKNOWN  => 'UNKNOWN',
    NAGIOS_STATUS_WARNING  => 'WARNING',
    NAGIOS_STATUS_CRITICAL => 'CRITICAL',
  );
}

/**
 * Functions to be performed by the base nagios module.
 */
function nagios_functions() {
  $functions = array(
    'requirements' => t('Checking of hook_requirements. This includes the following: module updates, database schema, files directory writability, update.php protected, Lots of other good stuff ...'),
    'watchdog' => t('Check recent watchdog entries'),
    'cron' => t('Check whether cron has been running regularly'),

    'session_anon' => t('Check the number of anonymous sessions for nagios performance data'),
    'session_auth' => t('Check the number of authenticated sessions for nagios performance data'),

    'nodes' => t('Check the number of nodes for nagios performance data'),
    'users' => t('Check the number of users for nagios performance data'),

    'modules' => t('Check the number of modules for nagios performance data'),
    'themes'  => t('Check the number of themes for nagios performance data'),
  );
  $moduleHandler = \Drupal::moduleHandler();
  if($moduleHandler->moduleExists('elysia_cron')) {
    $functions['elysia_cron'] = t('Check whether elysia cron has been running regularly');
  }
  return $functions;
}

/**
 * Custom invoke function
 */
function nagios_invoke_all($hook = 'nagios') {
  // This is a custom invoke function that returns a keyed array
  $return = array();
  $args = func_get_args();
  $moduleHandler = \Drupal::moduleHandler();
  $config = \Drupal::config('nagios.settings');
  foreach ($moduleHandler->getImplementations($hook) as $module) {
    // if we're running the checks, see if the checks for that module
    // are enabled, otherwise just continue
    if ($hook == 'nagios' && $config->get('nagios.enable.' . $module) == 0) {
      continue;
    }
    $result = $moduleHandler->invoke($module, $hook, $args);
    $return[$module] = $result;
  }

  return $return;
}

/**
 * Implementation of hook_nagios_info()
 */
function nagios_nagios_info() {
  return array(
    'name'   => 'Nagios monitoring',
    'id'     => 'NAGIOS',
  );
}

/**
 * Implements hook_nagios_settings().
 */
function nagios_nagios_settings() {
  $config = \Drupal::config('nagios.settings');
  $moduleHandler = \Drupal::moduleHandler();
  
  foreach (nagios_functions() as $function => $description) {
    $var = 'nagios_func_' . $function;
    $cfgname = 'function.' . $function;
    $form[$var] = array(
      '#type' => 'checkbox',
      '#title' => $function,
      '#default_value' => $config->get($cfgname) ?: TRUE,
      '#description' => $description,
      '#configname' => $cfgname
    );
  }

  $group = 'thresholds';
  $form[$group] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#title' => t('Thresholds'),
    '#description' => t('Thresholds for reporting critical alerts to Nagios.'),
  );

  $form[$group]['nagios_cron_duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Cron duration'),
    '#description' => t('Issue a critical alert when cron has not been running for this duration (in minutes). Default is 60 minutes.'),
    '#configname' => 'cron_duration',
  );

  if($moduleHandler->moduleExists('elysia_cron')) {
    $form[$group]['nagios_elysia_cron_duration'] = array(
      '#type' => 'textfield',
      '#title' => t('Elysia cron duration'),
      '#description' => t('Issue a critical alert when elysia cron has not been running for this duration (in minutes). Default is 60 minutes.'),
      '#configname' => 'elysia_cron_duration',
    );
  }

  $form[$group]['nagios_min_report_severity'] = array(
    '#type' => 'select',
    '#title' => t('Mininum report severity'),
    '#options' => nagios_status(),
    '#description' => t('Issue an alert only for this minimum severity, not for lower severities.'),
    '#configname' => 'min_report_severity',
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the module display view by adding a nagios ignore link to every module
 * description.
 */
function nagios_form_system_modules_alter(&$form, &$form_state, $form_id) {
  if (!\Drupal::currentUser()->hasPermission('administer nagios ignore') || isset($form['confirm'])) {
    return;
  }

  $config = \Drupal::config('nagios.settings');
  $nagios_ignored_modules = $config->get('nagios.ignored_modules') ?: array();
  $projects_data = \Drupal::service('update.manager')->getProjects();
  foreach ($form['modules'] as $package_name => &$package) {
    if ($package_name[0] != '#') {
      foreach ($package as $module_name => &$module) {
        if ($module_name[0] != '#') {
          if (isset($module['enable']['#default_value']) && $module['enable']['#default_value'] == TRUE && array_key_exists($module_name, $projects_data)) {
            $module['links']['nagios_ignore'] = array(
              '#type' => 'checkbox',
              '#title' => t('Ignore from Nagios'),
              '#default_value' => isset($nagios_ignored_modules[$module_name]) && $nagios_ignored_modules[$module_name] ? TRUE : FALSE,
            );
            if (!\Drupal::moduleHandler()->moduleExists('coder_review')) {
              $package['#theme'] = 'nagios_modules_fieldset';
            }
          }
        }
      }
    }
  }
  $form['#submit'][] = 'nagios_system_modules_form_submit';
}

/**
 * Additional system modules form submit handler.
 *
 * Saves the modules that have been selected to be ignored from Nagios
 * reporting to the 'nagios_ignored_modules' variable.
 * Variable contains an array of module names to be ignored in the form
 * 'module_machine_name' => TRUE
 */
function nagios_system_modules_form_submit(&$form, &$form_state) {
  $nagios_ignored_modules = array();
  foreach ($form_state->getValue('modules') as $package_name => $package) {
    if ($package_name[0] != '#') {
      foreach ($package as $module_name => $module) {
        if ($module_name[0] != '#') {
          if (isset($module['links']['nagios_ignore']) && $module['links']['nagios_ignore']) {
            $nagios_ignored_modules[$module_name] = TRUE;
          }
        }
      }
    }
  }
  \Drupal::configFactory()->getEditable('nagios.settings')
    ->set('nagios.ignored_modules', $nagios_ignored_modules)
    ->save();
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the module display view by adding a nagios ignore link to every module
 * description.
 */
function nagios_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (!\Drupal::currentUser()->hasPermission('administer nagios ignore') || isset($form['confirm'])) {
    return;
  }

  // Grab the name of the theme.
  $buildinfo = $form_state->getBuildInfo();
  if (isset($buildinfo['args'][0]) && !empty($buildinfo['args'][0])) {
    $theme_name = \Drupal\Component\Utility\Html::escape($buildinfo['args'][0]);

    $config = \Drupal::config('nagios.settings');
    $nagios_ignored_themes = $config->get('nagios.ignored_themes') ?: array();

    // Check to see if the theme is provided by core, or if it's contrib/custom.
    $projects_data = \Drupal::service('update.manager')->getProjects();
    if (array_key_exists($theme_name, $projects_data)) {
      // This is a settings page for a non-core theme, so add the checkbox.

      $form['nagios'] = array(
        '#type' => 'fieldset',
        '#title' => t('Nagios Monitoring'),
        'nagios_ignore' => array(
          '#type' => 'checkbox',
          '#title' => t('Ignore from Nagios'),
          '#weight' => 200,
          '#default_value' => isset($nagios_ignored_themes[$theme_name]) && $nagios_ignored_themes[$theme_name] ? TRUE : FALSE,
        ),
      );

      $form['#submit'][] = 'nagios_system_theme_settings_form_submit';
    }
  }
}

/**
 * Additional system theme settings form submit handler.
 *
 * Saves the Nagios theme ignore status to the 'nagios_ignored_themes' variable.
 * Variable contains an array of theme names to be ignored in the form
 * 'theme_machine_name' => TRUE
 */
function nagios_system_theme_settings_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $buildinfo = $form_state->getBuildInfo();
  // Grab the name of the theme.
  if (isset($buildinfo['args'][0]) && !empty($buildinfo['args'][0])) {
    $theme_name = \Drupal\Component\Utility\Html::escape($buildinfo['args'][0]);
    $config = \Drupal::config('nagios.settings');
    $nagios_ignored_themes = $config->get('nagios.ignored_themes') ?: array();

    if ($form_state->getValue('nagios_ignore')) {
      $nagios_ignored_themes[$theme_name] = TRUE;
    }
    else {
      unset($nagios_ignored_themes[$theme_name]);
    }

    \Drupal::configFactory()->getEditable('nagios.settings')
      ->set('nagios.ignored_themes', $nagios_ignored_themes)
      ->save();
  }
}

/**
 * Implementation of hook_nagios
 */
function nagios_nagios() {
  // Check the unique ID string first
  $config = \Drupal::config('nagios.settings');
  $ua = $config->get('nagios.ua');
  if ($_SERVER['HTTP_USER_AGENT'] != $ua) {
    // This is not an authorized unique id, so do not send information out
    return array(
      'DRUPAL' => array(
        'status' => NAGIOS_STATUS_UNKNOWN,
        'type'   => 'state',
        'text'   => t('Unauthorized'),
      ),
    );
  }

  $status = array();
  foreach(nagios_functions() as $function => $description) {
    if ($config->get('nagios_func_' . $function) !== 0) {
      $func = 'nagios_check_' . $function;
      $result = $func();
      $status[$result['key']] = $result['data'];
    }
  }

  return $status;
}

function nagios_check_requirements() {
  // Load .install files
  include_once './core/includes/install.inc';
  drupal_load_updates();

  // Get the run-time requirements and status information.
  $moduleHandler = \Drupal::service('module_handler');
  $reqs = $moduleHandler->invokeAll('requirements', array('runtime'));
  
  // Check the requirements as to the most severe status
  $severity = REQUIREMENT_OK;
  foreach ($reqs as $key => $requirement) {
    if (isset($requirement['severity'])) {
      if ($requirement['severity'] > $severity) {
        $severity = $requirement['severity'];
        $desc = $requirement['title'];
      }
    }
  }

  // Create a status to pass back, and a text description too
  switch($severity) {
    case REQUIREMENT_OK:
    case REQUIREMENT_INFO:
      $data = array(
        'status' => NAGIOS_STATUS_OK, 
        'type'   => 'state',
        'text'   => '',
      );
      break;
    case REQUIREMENT_WARNING:
      $data = array(
        'status' => NAGIOS_STATUS_WARNING, 
        'type'   => 'state',
        'text'   => t('@desc', array('@desc' => $desc)),
      );
      break;
    case REQUIREMENT_ERROR:
      $data = array(
        'status' => NAGIOS_STATUS_CRITICAL, 
        'type'   => 'state',
        'text'   => t('@desc', array('@desc' => $desc)),
      );
      break;
    default:
      $data = array(
        'status' => NAGIOS_STATUS_UNKNOWN, 
        'type'   => 'state',
        'text'   => t('severity is @severity',array('@severity' => $severity)),
      );
      break;
  }

  return array(
    'key' => 'ADMIN',
    'data' => $data,
  );
}

function nagios_check_cron() {
  $config = \Drupal::config('nagios.settings');
  // Determine when cron last ran.
  $cron_last = \Drupal::state()->get('system.cron_last');
  if (!is_numeric($cron_last)) {
    $cron_last = \Drupal::state()->get('install_time', 0);
  }
  $mins = $config->get('nagios_cron_duration') ?: 60;

  if (time() > ($cron_last + $mins*60)) {
    $data = array(
      'status' => NAGIOS_STATUS_CRITICAL,
      'type'   => 'state',
      'text'   => t('cron not running @mins mins', array('@mins' => $mins)),
    );
  }
  else {
    $data = array(
      'status' => NAGIOS_STATUS_OK, 
      'type'   => 'state',
      'text'   => '',
    );
  }

  return array(
    'key' => 'CRON',
    'data' => $data,
  );
}

function nagios_check_session_anon() {
  $interval = time() - 900; // Last 15 minutes
  $count = (int)nagios_session_count($interval, TRUE);

  $data = array(
    'status' => NAGIOS_STATUS_OK,
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'SAN',
    'data' => $data,
  );
}

function nagios_check_session_auth() {
  $interval = time() - 900; // Last 15 minutes
  $count = (int)nagios_session_count($interval, FALSE);

  $data = array(
    'status' => NAGIOS_STATUS_OK,
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'SAU',
    'data' => $data,
  );
}

function nagios_check_nodes() {
  // Include number of active nodes in the report
  $connection = \Drupal::database();
  $count = (int)$connection->query("SELECT COUNT(*) FROM {node_field_data} WHERE status = 1")->fetchField();
  $data = array(
    'status' => NAGIOS_STATUS_OK, 
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key'  => 'NOD',
    'data' => $data,
  );
}

function nagios_check_users() {
  // Include number of active users in the report
  $connection = \Drupal::database();
  $count = (int)$connection->query("SELECT COUNT(*) FROM {users_field_data} WHERE status = 1")->fetchField();
  $data = array(
    'status' => NAGIOS_STATUS_OK, 
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'USR',
    'data' => $data,
  );
}

function nagios_check_modules() {
  $config = \Drupal::config('core.extension');
  $modules = $config->get('module');
  $count = count($modules);
  $data = array(
    'status' => NAGIOS_STATUS_OK, 
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'MOD',
    'data' => $data,
  );
}

function nagios_check_themes() {
  $config = \Drupal::config('core.extension');
  $themes = $config->get('theme');
  $count = count($themes);
  $data = array(
    'status' => NAGIOS_STATUS_OK, 
    'type'   => 'perf',
    'text'   => $count,
  );

  return array(
    'key' => 'THM',
    'data' => $data,
  );
}

/**
 * Counts how many users are active on the site.
 *
 * Counts how many users have sessions which have been active since the
 * specified time. Can count either anonymous sessions or authenticated
 * sessions.
 *
 * @param $timestamp
 *   A Unix timestamp. Users who have been active since this time will be
 *   counted. The default is 0, which counts all existing sessions.
 * @param $anonymous
 *   TRUE counts only anonymous users. FALSE counts only authenticated users.
 *
 * @return
 *   The number of users with sessions.
 *
 * @todo There are mostly no anonymous sessions anymore. Split this into a
 *   separate module providing proper user statistics.
 */
function nagios_session_count($timestamp = 0, $anonymous = TRUE) {
  $query = db_select('sessions');
  $query->addExpression('COUNT(sid)', 'count');
  $query->condition('timestamp', $timestamp, '>=');
  $query->condition('uid', 0, $anonymous ? '=' : '>');
  return $query->execute()->fetchField();
}
