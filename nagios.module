<?php 
// $Id$

// Copyright 2009 Khalid Baheyeldin http://2bits.com

/**
 * Implementation of hook_menu
 */
function nagios_menu() {
  $items = array();
  $items['admin/settings/nagios'] = array(
    'type'               => MENU_NORMAL_ITEM,
    'title'              => t('Nagios monitoring'),
    'description'        => t('Settings for Nagios monitoring'),
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('nagios_settings'),
    'access arguments'   => array('administer site configuration'),
  );

  $items['nagios'] = array(
    'type'               => MENU_SUGGESTED_ITEM,
    'title'              => t('Nagios status page'),
    'page callback'      => 'nagios_status_page',
    'access callback'    => TRUE,
  );
  return $items;
}

/**
 * Callback for the settings page
 */
function nagios_settings() {
  $form['nagios_updates'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Show module updates'),
    '#default_value' => variable_get('nagios_updates', 1),
    '#description'   => t('Show if there are pending module updates in Nagios status.')
  );

  $form['nagios_users'] = array(
    '#type'          => 'textfield',
    '#title'         => t('User Agent'),
    '#default_value' => variable_get('nagios_ua', 'Nagios'),
    '#description'   => t('Restrict sending information to this User Agent string. You should change this to some unique string for your organization, and configure Nagios accordingly. This makes nagios data less accessible to curious users.')
  );

  return system_settings_form($form);
}

/**
 * Function to generate the status array
 */
function nagios_get_data() {
  $status = array();

  $status['status'] = 'unknown';

  $ua = variable_get('nagios_ua', 'Nagios');
  if ($_SERVER['HTTP_USER_AGENT'] != $ua) {
    // This is not an authorized user agent, so do not send information out
    $status['status'] = 'unauthorized';
  }
  else {
    if (variable_get('nagios_updates', 0)) {
      // Load .install files
      include_once './includes/install.inc';
      drupal_load_updates();
      // Check run-time requirements and status information.
      $requirements = module_invoke_all('requirements', 'runtime');
      switch(drupal_requirements_severity($requirements)) {
        case REQUIREMENT_OK:
          $status['status'] = 'ok';
          break;
        case REQUIREMENT_INFO:
          $status['status'] = 'info';
          break;
        case REQUIREMENT_WARNING:
          $status['status'] = 'warning';
          break;
        case REQUIREMENT_ERROR:
          $status['status'] = 'error';
          break;
        default:
          $status['status'] = 'unknown';
          break;
      }
    }

    // These queries give some site statistics, and also serve to ensure the database is up
    //
    // Include number of active nodes in the report
    $count = db_result(db_query("SELECT COUNT(*) FROM {node} WHERE status = 1"));
    if (!$count) {
      $status['status'] = 'error, no nodes';
    }
    else {
      $status['nodes'] = $count;
    }

    // Include number of active users in the report
    $count = db_result(db_query("SELECT COUNT(*) FROM {users} WHERE status = 1"));
    if ($count < 2) {
      $status['status'] = 'error, less than 2 users';
    }
    else {
      $status['users'] = $count;
    }
  }

  return $status;
}

/**
 * Callback for the nagios status page
 */
function nagios_status_page() {
  header("Pragma: no-cache");
  header("Expires: 0");

  $output = 'nagios=';
  foreach(nagios_get_data() as $key => $value) {
    $output .= $key . ':' . $value . ', ';
  }

  // Print the output, so we test the theme
  print theme('page', $output);

  // Exit early so we do not cache the data, nor do we wrap the result in a theme
  exit();
}
