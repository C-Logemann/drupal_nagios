<?php 
// $Id$

// Copyright 2009 Khalid Baheyeldin http://2bits.com

define('NAGIOS_STATUS_OK',       0);
define('NAGIOS_STATUS_UNKNOWN',  1);
define('NAGIOS_STATUS_WARNING',  2);
define('NAGIOS_STATUS_CRITICAL', 3);

/**
 * Implementation of hook_menu
 */
function nagios_menu() {
  $items = array();
  $items['admin/settings/nagios'] = array(
    'type'               => MENU_NORMAL_ITEM,
    'title'              => t('Nagios monitoring'),
    'description'        => t('Settings for Nagios monitoring'),
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('nagios_settings'),
    'access arguments'   => array('administer site configuration'),
  );

  $items['nagios'] = array(
    'type'               => MENU_SUGGESTED_ITEM,
    'title'              => t('Nagios status page'),
    'page callback'      => 'nagios_status_page',
    'access callback'    => TRUE,
  );
  return $items;
}

/**
 * Callback for the settings page
 */
function nagios_settings() {
  $form['nagios_ua'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Unique ID'),
    '#default_value' => variable_get('nagios_ua', 'Nagios'),
    '#description'   => t('Restrict sending information to requests identified by this Unique ID. You should change this to some unique string for your organization, and configure Nagios accordingly. This makes Nagios data less accessible to curious users. See the README.txt for more details.')
  );

  $form['nagios_cron_duration'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Cron duration'),
    '#default_value' => variable_get('nagios_cron_duration', 60),
    '#description'   => t('Issue a critical alert when cron has not been running for this duration (in minutes). Default is 60 minutes.')
  );

  return system_settings_form($form);
}

function nagios_status() {
  return array(
    NAGIOS_STATUS_OK       => 'OK',
    NAGIOS_STATUS_UNKNOWN  => 'UNKNOWN',
    NAGIOS_STATUS_WARNING  => 'WARNING',
    NAGIOS_STATUS_CRITICAL => 'CRITICAL',
  );
}

/**
 * Callback for the nagios status page
 */
function nagios_status_page() {
  header("Pragma: no-cache");
  header("Expires: 0");

  $codes = nagios_status();

  $nagios_data = nagios_invoke();

  // Find the highest level to be the overall status
  $severity = NAGIOS_STATUS_OK;

  foreach($nagios_data as $module_name => $module_data) {
    foreach($module_data as $key => $value) {
      $severity = max($severity, $value['status']);
    }
  }

  // Identifier that we check on the other side
  $output = "\n" . 'nagios=' . $codes[$severity] . ', ';

  foreach($nagios_data as $module_name => $module_data) {
    foreach($module_data as $key => $value) {
      $output .= $key . ':' .  $codes[$value['status']];
      if (isset($value['text']) && !empty($value['text'])) {
        $output .= '=' . $value['text'];
      }
      $output .= ', ';
    }
  }

  $output .= "\n";

  // Print the output, so we test the theme
  print theme('page', $output);

  // Exit early so we do not cache the data, nor do we wrap the result in a theme
  exit();
}

/**
 * Custom invoke function
 */
function nagios_invoke() {
  $return = array();
  $args = func_get_args();
  $hook = 'nagios';
  // This is a custom invoke function that returns a keyed array
  foreach (module_implements($hook) as $module) {
    $function = $module .'_'. $hook;
    $result = call_user_func_array($function, $args);
    $return[$module] = $result;
  }

  return $return;
}

/**
 * Implementation of hook_nagios
 */
function nagios_nagios() {
  $status = array();

  $ua = variable_get('nagios_ua', 'Nagios');
  if ($_SERVER['HTTP_USER_AGENT'] != $ua) {
    // This is not an authorized unique id, so do not send information out
    return array(
      'DRUPAL' => array(
        'status' => NAGIOS_STATUS_UNKNOWN,
        'text'   => t('Unauthorized'),
      ),
    );
  }

  // Check requirements (module updates, files directory writable, update.php protected,
  // and many other good stuff, ...etc.)
  $status = array_merge($status, nagios_check_requirements());

  // Check that cron has been running
  $status = array_merge($status, nagios_check_cron());

  // These queries give some site statistics, and also serve to ensure the database is up
  $status = array_merge($status, nagios_check_nodes());
  $status = array_merge($status, nagios_check_users());

  return $status;
}

function nagios_check_requirements() {
  $status = array();
  $id = 'REQS';

  // Load .install files
  include_once './includes/install.inc';
  drupal_load_updates();
  // Check run-time requirements and status information.
  $requirements = module_invoke_all('requirements', 'runtime');
  $severity = drupal_requirements_severity($requirements);
  switch($severity) {
    case REQUIREMENT_OK:
    case REQUIREMENT_INFO:
      $status[$id] = array(
        'status' => NAGIOS_STATUS_OK, 
        'text'   => '',
      );
      break;
    case REQUIREMENT_WARNING:
      $status[$id] = array(
        'status' => NAGIOS_STATUS_WARNING, 
        'text'   => t('admin followup required'),
      );
      break;
    case REQUIREMENT_ERROR:
      $status[$id] = array(
        'status' => NAGIOS_STATUS_CRITICAL, 
        'text'   => t('admin attention required'),
      );
      break;
    default:
      $status[$id] = array(
        'status' => NAGIOS_STATUS_UNKNOWN, 
        'text'   => t('severity is @severity',array('@severity' => $severity)),
      );
      break;
  }

  return $status;
}

function nagios_check_cron() {
  $status = array();
  $id = 'CRON';

  $cron_last = variable_get('cron_last', 0);
  $mins = variable_get('nagios_cron_duration', 60);

  if (time() > ($cron_last + $mins*60)) {
    $status[$id] = array(
      'status' => NAGIOS_STATUS_CRITICAL,
      'text'   => t('cron has not been running for more than @mins minutes', array('@mins' => $mins)),
    );
  }
  else {
    $status[$id] = array(
      'status' => NAGIOS_STATUS_OK, 
      'text'   => '',
    );
  }
  return $status;
}

function nagios_check_nodes() {
  $status = array();
  $id = 'NODE';

  // Include number of active nodes in the report
  $count = db_result(db_query("SELECT COUNT(*) FROM {node} WHERE status = 1"));
  if (!$count) {
    $status[$id] = array(
      'status' => NAGIOS_STATUS_WARNING,
      'text'   => t('No nodes'),
    );
  }
  else {
    $status[$id] = array(
      'status' => NAGIOS_STATUS_OK, 
      'text'   => $count,
    );
  }

  return $status;
}

function nagios_check_users() {
  $status = array();
  $id = 'USER';

  // Include number of active users in the report
  $count = db_result(db_query("SELECT COUNT(*) FROM {users} WHERE status = 1"));
  if ($count < 1) {
    $status[$id] = array(
      'status' => NAGIOS_STATUS_WARNING,
      'text'   => t('No active users'),
    );
  }
  else {
    $status[$id] = array(
      'status' => NAGIOS_STATUS_OK, 
      'text'   => $count,
    );
  }

  return $status;
}
